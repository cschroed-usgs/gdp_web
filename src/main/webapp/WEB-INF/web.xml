<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
	<display-name>gdp_web</display-name>
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	<servlet>
		<servlet-name>process_client</servlet-name>
		<jsp-file>/process_client.jsp</jsp-file>
	</servlet>
	<servlet-mapping>
		<servlet-name>process_client</servlet-name>
		<url-pattern>/advanced</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>process_client</servlet-name>
		<url-pattern>/catalog</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>config</servlet-name>
		<jsp-file>/WEB-INF/jsp/config.jsp</jsp-file>
	</servlet>
	<servlet-mapping>
		<servlet-name>config</servlet-name>
		<url-pattern>/config</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>algorithms</servlet-name>
		<jsp-file>/WEB-INF/jsp/algorithms.json</jsp-file>
	</servlet>
	<servlet-mapping>
		<servlet-name>algorithms</servlet-name>
		<url-pattern>/algorithms</url-pattern>
	</servlet-mapping>
	
	<servlet>
        <servlet-name>GeoServerProxyServlet</servlet-name>
        <servlet-class>gov.usgs.cida.proxy.AlternateProxyServlet</servlet-class>
        <init-param>
            <param-name>forward-url-param</param-name>
            <param-value>gdp.geoserver.endpoint</param-value>
        </init-param>
        <init-param>
            <param-name>readTimeout</param-name>
            <param-value>300000</param-value>
        </init-param>
    </servlet>
	 <servlet-mapping>
        <servlet-name>GeoServerProxyServlet</servlet-name>
        <url-pattern>/geoserver/*</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>UtilityWpsProxyServlet</servlet-name>
		<servlet-class>gov.usgs.cida.proxy.AlternateProxyServlet</servlet-class>
		<init-param>
		<param-name>forward-url-param</param-name>
		<param-value>gdp.endpoint.utilityWps</param-value>
		</init-param>
		<init-param>
		<param-name>readTimeout</param-name>
		<param-value>300000</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>UtilityWpsProxyServlet</servlet-name>
		<url-pattern>/utilityWps/*</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>ProcessWpsProxyServlet</servlet-name>
		<servlet-class>gov.usgs.cida.proxy.AlternateProxyServlet</servlet-class>
		<init-param>
			<param-name>forward-url-param</param-name>
			<param-value>gdp.endpoint.processWps</param-value>
		</init-param>
		<init-param>
			<param-name>readTimeout</param-name>
			<param-value>300000</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>ProcessWpsProxyServlet</servlet-name>
		<url-pattern>/processWps/*</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>CWSProxyServlet</servlet-name>
		<servlet-class>gov.usgs.cida.proxy.AlternateProxyServlet</servlet-class>
		<init-param>
			<param-name>forward-url-param</param-name>
			<param-value>gdp.endpoint.csw</param-value>
		</init-param>
		<init-param>
			<param-name>readTimeout</param-name>
			<param-value>300000</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>CWSProxyServlet</servlet-name>
		<url-pattern>/csw/*</url-pattern>
	</servlet-mapping>
	
	<servlet>
        <servlet-name>shapefile-upload-servlet</servlet-name>
        <servlet-class>gov.usgs.cida.geoutils.geoserver.servlet.ShapefileUploadServlet</servlet-class>
        <!--
		Used for reading JNDI variables. All JNDI variables used for this application
		will be prefixed with this parameter. Example:
		<Environment name="coastal-hazards.max.upload.file.size" type="java.lang.String" value="20000" />
		-->
        <init-param>
            <param-name>application.name</param-name>
            <param-value>gdp</param-value>
        </init-param>
        <!--
		Used to limit the size of incoming files measured in bytes. [Optional]
		0 = Integer.MAX_VALUE
		-->
        <init-param>
            <param-name>max.upload.file.size</param-name>
            <param-value>0</param-value>
        </init-param>
        <!--
		The URL of the geoserver that will be used for uploading.
		-->
        <init-param>
            <param-name>geoserver.endpoint</param-name>
            <param-value>http://localhost:8081/geoserver/</param-value>
        </init-param>
        <!--
		The username used to authenticate against when writing against GeoServer.
		-->
        <init-param>
            <param-name>geoserver.username</param-name>
            <param-value>admin</param-value>
        </init-param>
        <!--
		Workspace name that files will be uploaded to by default. [Optional. If this
		parameter is not provided here, in JNDI and during the request, upload will fail]
		-->
        <init-param>
            <param-name>default.upload.workspace</param-name>
            <param-value>upload</param-value>
        </init-param>
        <!--
		Store name that files will be uploaded to by default. [Optional. If this
		parameter is not provided here, in JNDI and during the request, upload will fail]
		-->
        <init-param>
            <param-name>default.upload.storename</param-name>
            <param-value/>
        </init-param>
        <!--
		Default SRS is not defined. If a SRS name is not passed to during the
		request, the request will fail [Optional. If this parameter is not provided
		here, in JNDI and during the request, upload will fail]
		-->
        <init-param>
            <param-name>default.srs</param-name>
            <param-value>EPSG:4326</param-value>
        </init-param>
        <!--
		The key to search for in the upload form post to find the file
		[Optional. If this parameter is not provided "qqfile" will be used]
		-->
        <init-param>
            <param-name>filename.param</param-name>
            <param-value/>
        </init-param>
        <!--
		Should the existing layer, if one exists, be overwritten?
		[Optional. If this parameter is not provided "false" will be used]
		**WARNING** Setting this to true may be dangerous since the previous layer
		will be removed prior to a new layer being imported. If the import fails,
		there is no ay to recover the previous layer.
		-->
        <init-param>
            <param-name>overwrite.existing.layer</param-name>
            <param-value/>
        </init-param>
        <!--
		Whether or not to use base CRS if native could not be found. Default true
		[Optional. If this parameter is not provided "true" will be used]
		-->
        <init-param>
            <param-name>use.crs.failover</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--
		Reprojection policy for a published layer. One of:
		- reproject - Reproject from native to declared CRS
		- force - Use the declared CRS (ignore native)
		- none - No reprojection (use native CRS)
		[Optional. If this parameter is not provided "reproject" will be used]
		-->
        <init-param>
            <param-name>projection.policy</param-name>
            <param-value>reproject</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>shapefile-upload-servlet</servlet-name>
        <url-pattern>/uploadhandler</url-pattern>
    </servlet-mapping>
</web-app>